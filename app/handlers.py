from email import message
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from app.database.requests import get_user_habits
from app.keyboards import create_habits_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.database.requests import remove_habit, mark_habit_as_completed, get_habit_statistics, mark_habit_as_not_completed
from sqlalchemy.ext.asyncio import async_session
from app.database.models import HabitModel

import app.keyboards as kb
import app.database.requests as rg



storage = MemoryStorage()
router = Router()

class Register(StatesGroup):
    name = State()
    #age = State()

class HabitStates(StatesGroup):
    set_habit = State()
    
    

@router.message(CommandStart())  # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä(–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
async def cmd_start(message: Message):  # –ª–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await rg.set_user(message.from_user.id)
    await message.answer(
    """–ü—Ä–∏–≤–µ—Ç! üëã 
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫! üå±
–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ª–µ–≥–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏, –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π. 
–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è?
–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ! üí™‚ú®""", reply_markup=kb.main
    )  # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é



@router.message(Command("help"))
async def cmd_help(message: Message):   #–ø–∞—Ä–∞–º–µ—Ç—Ä, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏")



@router.message(F.text == "–ü—Ä–∏–≤—ã—á–∫–∏")  # –º–∏–Ω–∏ –¥–∏–∞–ª–æ–≥
async def habit(message: Message):
    user_id = message.from_user.id 
    user_habits = await get_user_habits(user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É", reply_markup=kb.habit)
    
    #if user_habits:
       #habits_keyboard = create_habits_keyboard(user_habits)
        #await message.answer("–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=habits_keyboard)
    #else:
        #await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.", reply_markup=add_habit_keyboard())
        
        
    try:
        user_habits = await get_user_habits(user_id)
        if user_habits: 
           habits_keyboard = create_habits_keyboard(user_habits) 
           await message.answer("–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=habits_keyboard) 
        else: 
           await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.", reply_markup=create_habits_keyboard([]))
    except Exception as e:
       print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
       await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")    
    

@router.callback_query(F.data == ("add"))
async def add_habit(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: ")
    await state.set_state(HabitStates.set_habit)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      
# –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(HabitStates.set_habit)
async def set_habit(message: Message, state: FSMContext):
    habit_name = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #await save_habit(habit_name, user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    await rg.save_habit(habit_name, user_id)
    await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ {habit_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n")
    await state.clear()
   
    user_habits = await get_user_habits(user_id)
    habits_keyboard = create_habits_keyboard(user_habits)
    await message.answer("–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=habits_keyboard)
    
    await state.clear()


@router.callback_query(F.data.startswith("habit_")) 
async def handle_habit(callback: CallbackQuery): 
    habit_id = callback.data.split("_")[1] 
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–£–¥–∞–ª–∏—Ç—å" –∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    habit_keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [ 
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{habit_id}"), 
            InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"view_stats_{habit_id}") 
        ] 
    ]) 
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=habit_keyboard)

@router.callback_query(F.data.startswith("confirm_delete_")) 
async def confirm_delete_habit(callback: CallbackQuery): 
    habit_id = callback.data.split("_")[2] 
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è 
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
        [ 
            InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{habit_id}"), 
            InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete") 
        ] 
    ]) 
    
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É?", reply_markup=confirm_keyboard)

@router.callback_query(F.data.startswith("delete_")) 
async def delete_habit(callback: CallbackQuery): 
    habit_id = callback.data.split("_")[1] 
    user_id = callback.from_user.id 

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 
    await rg.remove_habit(habit_id, user_id) 

    await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞!") 
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è 
    user_habits = await get_user_habits(user_id) 
    habits_keyboard = create_habits_keyboard(user_habits) 
    await callback.message.answer("–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=habits_keyboard) 

@router.callback_query(F.data == "cancel_delete") 
async def cancel_delete(callback: CallbackQuery): 
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@router.callback_query(F.data.startswith("view_stats_")) 
async def view_stats(callback: CallbackQuery):
    habit_id = callback.data.split("_")[2]
    
    # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ
    stats = await get_habit_statistics(habit_id)
    
    await callback.message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ {habit_id}: {stats}")
    
    
@router.message(F.text == "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫")  # –º–∏–Ω–∏ –¥–∏–∞–ª–æ–≥
async def statushabit(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É", reply_markup=kb.habit)

@router.message(Command('register'))
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.message(Register.name)
async def register_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n')
    #await state.set_state(Register.age)
    #await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    await state.clear()
    
    
#@router.message(Register.age)
#async def register_name_handler(message: Message, state: FSMContext):
    #await state.update_data(age=message.text)
    #data = await state.get_data()

    #await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {data['age']}')
    #await state.clear()
    
    
@router.message(Command("show_habits")) #—ç—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π "/show_habits"
async def show_habits(message: Message): # —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    user_id = message.from_user.id
    habits = await get_user_habits(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not habits:
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")
        return

    keyboard = InlineKeyboardMarkup(row_width=3)  # –¢–µ–ø–µ—Ä—å 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    for habit in habits:
        button_done = InlineKeyboardButton("‚úÖ", callback_data=f"mark_done_{habit.Habitid}")
        button_not_done = InlineKeyboardButton("‚ùå", callback_data=f"mark_not_done_{habit.Habitid}")
        row = [ #—Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫
            InlineKeyboardButton(habit.Habit_name, callback_data=f"view_stats_{habit.Habitid}"),
            button_done,
            button_not_done
        ]
        keyboard.add(*row)
    
    await message.answer("–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:", reply_markup=keyboard)
    
    
    
    
@router.callback_query(F.data.startswith("mark_done_"))
async def mark_done(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async with async_session() as session:
        await mark_habit_as_completed(habit_id, user_id, session)

    await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    await show_habits(callback.message)
    
@router.callback_query(F.data.startswith("mark_not_done_"))
async def mark_not_done(callback: CallbackQuery):
    habit_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id

    async with async_session() as session:
        await mark_habit_as_not_completed(habit_id, user_id, session)

    await callback.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
    await show_habits(callback.message)
    
    
@router.message(Command("stats"))
async def show_statistics(message: Message):
    user_id = message.from_user.id
    habits = await get_habit_statistics(user_id)

    response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫:\n"
    for habit in habits: 
        last_completed = habit.last_completed_date.strftime("%Y-%m-%d") if habit.last_completed_date else "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        response += f"{habit.Habit_name}: {habit.completed_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {last_completed}\n" 

    await message.answer(response)
    
    
    
@router.callback_query(F.data.startswith("view_stats_"))  
async def view_stats(callback: CallbackQuery): 
    habit_id = callback.data.split("_")[2] 
    stats = await get_habit_statistics(habit_id) 
    
    if stats:
        await callback.message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ {stats['name']}: {stats['completed_streak']} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥, –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {stats['last_completed_date']}")
    else:
        await callback.message.answer("–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
           