from email import message
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import app.keyboards as kb
import app.database.requests as rg

storage = MemoryStorage()
router = Router()

class Register(StatesGroup):
    name = State()
    #age = State()

class HabitStates(StatesGroup):
    set_habit = State()
    
    

@router.message(CommandStart())  # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä(–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)
async def cmd_start(message: Message):  # –ª–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await rg.set_user(message.from_user.id)
    await message.answer(
    """–ü—Ä–∏–≤–µ—Ç! üëã 
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫! üå±
–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ª–µ–≥–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏, –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π. 
–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è?
–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ! üí™‚ú®""", reply_markup=kb.main
    )  # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


@router.message(Command("help"))
async def cmd_help(message: Message):   #–ø–∞—Ä–∞–º–µ—Ç—Ä, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏")


@router.message(F.text == "–ü—Ä–∏–≤—ã—á–∫–∏")  # –º–∏–Ω–∏ –¥–∏–∞–ª–æ–≥
async def habit(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É", reply_markup=kb.habit)


@router.callback_query(F.data == ("add"))
async def add_habit(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: ")
    await state.set_state(HabitStates.set_habit)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      
# –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(HabitStates.set_habit)
async def set_habit(message: Message, state: FSMContext):
    habit_name = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await rg.save_habit(habit_name)
    await message.answer(f"–ü—Ä–∏–≤—ã—á–∫–∞ {habit_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n")
    await state.clear()
   
@router.message(F.text == "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫")  # –º–∏–Ω–∏ –¥–∏–∞–ª–æ–≥
async def statushabit(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É", reply_markup=kb.habit)

@router.message(Command('register'))
async def register(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')

@router.message(Register.name)
async def register_name_handler(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n')
    #await state.set_state(Register.age)
    #await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    await state.clear()
    
    
#@router.message(Register.age)
#async def register_name_handler(message: Message, state: FSMContext):
    #await state.update_data(age=message.text)
    #data = await state.get_data()

    #await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {data['age']}')
    #await state.clear()